// app/page.tsx

export const revalidate = 60; // Revalidate data every 60s (ISR)

// List of repositories you want to display
const selectedRepos = [
  { owner: 'xanmoy', repo: 'whatsapp-desktop-client' },
  { owner: 'xanmoy', repo: 'chatgpt-desktop-client' },
  { owner: 'xanmoy', repo: 'notion-desktop' },
  // Add more if needed
];

/**
 * Utility to convert a date string into a relative time (e.g. "2 days ago").
 */
function getRelativeTime(dateString: string): string {
  const now = new Date();
  const date = new Date(dateString);
  const diffMs = now.getTime() - date.getTime();
  const diffSeconds = diffMs / 1000;
  const diffMinutes = diffSeconds / 60;
  const diffHours = diffMinutes / 60;
  const diffDays = Math.floor(diffHours / 24);

  if (diffDays > 0) {
    return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
  } else if (diffHours >= 1) {
    return `${Math.floor(diffHours)} hour${diffHours >= 2 ? 's' : ''} ago`;
  } else if (diffMinutes >= 1) {
    return `${Math.floor(diffMinutes)} minute${diffMinutes >= 2 ? 's' : ''} ago`;
  } else {
    return 'Just now';
  }
}

/**
 * Fetch commits from a given GitHub repo.
 */
async function getCommits(owner: string, repo: string) {
  const res = await fetch(`https://api.github.com/repos/${owner}/${repo}/commits`, {
    headers: {
      Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
    },
  });

  if (!res.ok) {
    const errorData = await res.json();
    console.error('GitHub API error:', res.status, errorData);
    throw new Error(`Failed to fetch commits for ${owner}/${repo}`);
  }

  return res.json();
}

export default async function HomePage() {
  // We'll fetch commits for all selected repos in parallel
  let repoCommitsData: Array<{
    owner: string;
    repo: string;
    commits: Array<{
      sha: string;
      commit: {
        author: {
          name: string;
          date: string;
        };
        message: string;
      };
    }>;
  }> = [];

  try {
    // Promise.all to fetch all repos in parallel
    repoCommitsData = await Promise.all(
      selectedRepos.map(async (r) => {
        const commits = await getCommits(r.owner, r.repo);
        return {
          owner: r.owner,
          repo: r.repo,
          commits,
        };
      })
    );
  } catch (error: unknown) {
    // If any fetch fails, display an error message
    return (
      <main className="p-4">
        <h1 className="text-2xl font-bold mb-4">Error</h1>
        <p>{(error instanceof Error) ? error.message : 'An unknown error occurred'}</p>
      </main>
    );
  }

  return (
    <main>
      {/* Header section */}
      <header className="border-b border-gray-700 p-4">
        <h1 className="text-xl">index : my-git-browser</h1>
      </header>

      {/* Intro section */}
      <section className="p-4">
        <h2 className="text-2xl font-bold mb-2">Selected Repositories</h2>
        <p className="text-gray-300 mb-4">
          Below are the latest commits from a few chosen GitHub repositories.
        </p>
      </section>

      {/* Display each repo's commits in its own table */}
      {repoCommitsData.map(({ owner, repo, commits }) => (
        <section key={`${owner}/${repo}`} className="p-4">
          <h3 className="text-xl font-semibold mb-2">
            {owner}/{repo}
          </h3>
          <div className="overflow-x-auto">
            <table className="w-full table-auto text-sm border-collapse">
              <thead className="border-b border-gray-700 text-gray-300">
                <tr>
                  <th className="px-2 py-1 text-left w-1/2">Commit message</th>
                  <th className="px-2 py-1 text-left w-1/4">Author</th>
                  <th className="px-2 py-1 text-left w-1/4">Age</th>
                </tr>
              </thead>
              <tbody>
                {commits.map((commit: { sha: string; commit: { author: { name: string; date: string }; message: string } }) => {
                  const authorName = commit.commit.author?.name ?? 'Unknown';
                  const dateString =
                    commit.commit.author?.date ?? new Date().toISOString();
                  const relativeTime = getRelativeTime(dateString);

                  return (
                    <tr
                      key={commit.sha}
                      className="border-b border-gray-800"
                    >
                      <td className="px-2 py-2">
                        {commit.commit.message}
                      </td>
                      <td className="px-2 py-2">
                        {authorName}
                      </td>
                      <td className="px-2 py-2">
                        {relativeTime}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </section>
      ))}
    </main>
  );
}
